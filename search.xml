<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>YOLO+IOPaint组合，自动识别并移除水印的demo</title>
      <link href="/2024/06/06/yolo8-plus-iopaint/"/>
      <url>/2024/06/06/yolo8-plus-iopaint/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本demo使用<a href="https://github.com/ultralytics/ultralytics">ultralytics-YOLO8</a>对水印位置进行检测，然后使用<a href="https://github.com/Sanster/IOPaint">IOPaint</a>移除yolo识别的目标水印。</p><p>本demo中使用的<a href="models/last.pt">last.pt</a>模型来自<a href="https://github.com/Samge0/yolo8-watermark-brand">yolo8-watermark-brand</a>仓库。</p><p>本demo支持使用iopaint的api方式去除水印，只需在<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/remove_watermark_with_onnx.py">remove_watermark_with_onnx.py</a> 或 <a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/remove_watermark.py">remove_watermark.py</a>中配置<code>USE_IOPAINT_API=True</code>，可减少批量操作时iopaint命令行方式的初始化耗时。</p><p>如果配置<code>USE_IOPAINT_API=True</code>，需要先启动iopaint服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python iopaint_server.py</span><br></pre></td></tr></table></figure><p>当然，也可以选择对接单独部署的iopaint服务，只需要在<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/iopaint_api_utils.py">iopaint_api_utils.py</a>中配置自定义的<code>IOPAINT_SERVER_HOST</code>即可。</p><h2 id="当前开发环境使用的关键依赖版本"><a href="#当前开发环境使用的关键依赖版本" class="headerlink" title="当前开发环境使用的关键依赖版本"></a>当前开发环境使用的关键依赖版本</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python==3.8.18</span><br><span class="line">torch==2.3.0+cu118</span><br><span class="line">torchvision==0.18.0+cu118</span><br><span class="line">ultralytics==8.2.26</span><br><span class="line">IOPaint==1.3.3</span><br><span class="line">onnxruntime_gpu==1.18.0</span><br><span class="line"></span><br><span class="line"># the onnx dependency is to automatically export the onnx model at train time</span><br><span class="line">onnx==1.16.1</span><br><span class="line">onnx-simplifier==0.4.36</span><br><span class="line">onnxsim==0.4.36</span><br><span class="line">onnxslim==0.1.28</span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><p>【推荐】使用vscode的<code>Dev Containers</code>模式，参考<a href=".devcontainer/README.md">.devcontainer&#x2F;README.md</a></p></li><li><p>【可选】其他虚拟环境方式</p><ul><li>【二选一】安装torch-cpu版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision</span><br></pre></td></tr></table></figure></li><li>【二选一】安装torch-cuda版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118</span><br></pre></td></tr></table></figure></li><li>【必要】安装依赖  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="运行方式-demo1："><a href="#运行方式-demo1：" class="headerlink" title="运行方式-demo1："></a>运行方式-demo1：</h2><p><code>ultralytics + IOPaint（命令行方式）</code>，<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/remove_watermark.py">脚本：remove_watermark.py</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python remove_watermark.py</span><br></pre></td></tr></table></figure><h2 id="运行方式-demo2："><a href="#运行方式-demo2：" class="headerlink" title="运行方式-demo2："></a>运行方式-demo2：</h2><p><code>onnxruntime + IOPaint（命令行方式）</code>，<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/remove_watermark_with_onnx.py">脚本：remove_watermark_with_onnx.py</a><br>pt转onnx模型可参考<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/yolo_utils.py">yolo_utils.py</a>的mian函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python remove_watermark_with_onnx.py</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><blockquote><p>1、如果遇到<code>Could not locate zlibwapi.dll. Please make sure it is in your library path</code>错误，需要下载相关dll放置到目标位置：</p></blockquote><ul><li><a href="https://pan.baidu.com/s/1SrxZFkxwpwydn1fuFaWtgw?pwd=6cgb">点击下载：https://pan.baidu.com/s/1SrxZFkxwpwydn1fuFaWtgw?pwd=6cgb 提取码: 6cgb</a></li><li>lib文件放到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.x\lib</code> （这里以windows系统为例，其中<code>v11.x</code>是实际安装的cuda版本路径）</li><li>dll文件放到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.x\bin</code> （这里以windows系统为例，其中<code>v11.x</code>是实际安装的cuda版本路径）</li></ul><h2 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h2><table><thead><tr><th align="center">before</th><th align="center">after</th></tr></thead><tbody><tr><td align="center"><img src="https://github.com/Samge0/yolo8-plus-iopaint/assets/17336101/801bdcef-88d7-449d-a48a-428e117b58ab" alt="before"></td><td align="center"><img src="https://github.com/Samge0/yolo8-plus-iopaint/assets/17336101/a465b913-4aa1-4c04-a12b-c0211d47b6bc" alt="after"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> samge </tag>
            
            <tag> yolo </tag>
            
            <tag> iopaint </tag>
            
            <tag> watermark </tag>
            
            <tag> models </tag>
            
            <tag> onnx </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用yolo训练品牌logo的水印检测模型的demo</title>
      <link href="/2024/06/06/yolo8-watermark-brand/"/>
      <url>/2024/06/06/yolo8-watermark-brand/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本demo使用<code>labelImg</code>对<code>26</code>张样本图片的水印位置进行标注，<a href="https://github.com/ultralytics/ultralytics">ultralytics-YOLO8</a>对水印位置进行模型训练&amp;检测。</p><p>如果需要使用 <a href="https://github.com/ultralytics/ultralytics">ultralytics-YOLO8</a> + <a href="https://github.com/Sanster/IOPaint">IOPaint</a> 进行组合，自动移除yolo识别的目标水印，请点击<a href="https://github.com/Samge0/yolo8-plus-iopaint">yolo8-plus-iopaint</a>仓库查看。</p><h2 id="当前开发环境使用的关键依赖版本"><a href="#当前开发环境使用的关键依赖版本" class="headerlink" title="当前开发环境使用的关键依赖版本"></a>当前开发环境使用的关键依赖版本</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python==3.8.18</span><br><span class="line">torch==2.3.0+cu118</span><br><span class="line">torchvision==0.18.0+cu118</span><br><span class="line">ultralytics==8.2.28</span><br><span class="line"></span><br><span class="line"># labelImg is used to label the training data</span><br><span class="line">labelImg==1.8.6</span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><p>【推荐】使用vscode的<code>Dev Containers</code>模式，参考<a href="https://github.com/Samge0/yolo8-watermark-brand/tree/main/.devcontainer">.devcontainer&#x2F;README.md</a></p></li><li><p>【可选】其他虚拟环境方式</p><ul><li>【二选一】安装torch-cpu版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision</span><br></pre></td></tr></table></figure></li><li>【二选一】安装torch-cuda版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118</span><br></pre></td></tr></table></figure></li><li>【必要】安装依赖  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py</span><br></pre></td></tr></table></figure><h2 id="推理"><a href="#推理" class="headerlink" title="推理"></a>推理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure><h2 id="自定义数据集进行训练："><a href="#自定义数据集进行训练：" class="headerlink" title="自定义数据集进行训练："></a>自定义数据集进行训练：</h2><ul><li><p>安装<code>labelImg</code></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install labelImg</span><br></pre></td></tr></table></figure></li><li><p>启动<code>labelImg</code></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">labelImg</span><br></pre></td></tr></table></figure></li><li><p>清理或备份旧的数据集，将需要训练的新数据图集放到<a href="datasets/data/images">datasets&#x2F;data&#x2F;images</a>目录，参与训练的图片宽高最好一致，训练前需要在<a href="train.py">train.py</a>中配置<code>imgsz</code>图片宽高信息</p></li><li><p>在<code>labelImg</code>打开<a href="datasets/data/images">datasets&#x2F;data&#x2F;images</a>的图集进行标注，保存格式选择<code>YOLO</code>（建议点击<code>File -&gt; YOLO</code>保存全局默认<code>YOLO</code>导出后，重新打开<code>labelImg</code>，可在后续保存标注时避免频繁切换导出格式）</p></li><li><p>标注完毕后，执行命令将<a href="datasets/data/images">datasets&#x2F;data&#x2F;images</a>拆分为<a href="datasets/data/train">datasets&#x2F;data&#x2F;train</a>、<a href="datasets/data/test">datasets&#x2F;data&#x2F;test</a>、<a href="datasets/data/val">datasets&#x2F;data&#x2F;val</a></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd datasets &amp;&amp; python Process.py</span><br></pre></td></tr></table></figure></li><li><p>按前面文档所示，执行<code>python train.py</code>进行训练，执行<code>python test.py</code>进行推理</p></li></ul><h2 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h2><ul><li><p>labelImg标注界面<br><img src="https://github.com/Samge0/yolo8-watermark-brand/assets/17336101/c8f9ac72-09f0-4bf7-93f5-e0aa0b20e7ef" alt="labelImg"></p></li><li><p>训练后的模型预测结果<br><img src="https://github.com/Samge0/yolo8-watermark-brand/assets/17336101/ccdccdc0-8683-499d-bd2b-27948a0fa4f3" alt="output-result"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> samge </tag>
            
            <tag> yolo </tag>
            
            <tag> watermark </tag>
            
            <tag> models </tag>
            
            <tag> demo </tag>
            
            <tag> train </tag>
            
            <tag> labelImg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ApkCopilot 多渠道打包&amp;签名</title>
      <link href="/2024/06/06/apk-copilot/"/>
      <url>/2024/06/06/apk-copilot/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个简易的ApkCopilot 多渠道打包&amp;签名 + gradio操作界面。<a href="https://github.com/Samge0/apk-copilot">Github&gt;&gt;</a><br><br>360加固的<code>多渠道打包+签名</code>功能收费了，这是<code>多渠道打包+签名</code>的替代方案，只需要<code>上传加固后的apk</code>即可自动签名&amp;打多渠道包。<br><br>本项目使用<code>walle</code>进行多渠道打包，需要在安卓项目中配置<a href="https://github.com/Meituan-Dianping/walle">walle</a>。</p><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><p>（这里只是列出开发已知可行版本，其他版本需要使用这自己探索）</p><ul><li>java：<code>java version &quot;17.0.2</code>，<a href="https://jdk.java.net/archive/">下载地址&gt;&gt;</a></li><li>python：<code>Python 3.10</code>，<a href="https://www.python.org/downloads/">下载地址&gt;&gt;</a></li><li>build-tools：<code>33.0.0</code>，<a href="https://androidsdkmanager.azurewebsites.net/Buildtools">下载地址&gt;&gt;</a></li></ul><h2 id="docker方式运行"><a href="#docker方式运行" class="headerlink" title="docker方式运行"></a>docker方式运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name apk-copilot \</span><br><span class="line">-p 7860:7860 \</span><br><span class="line">-e APK_COPILOT_AUTH=&quot;user1:pw1|user2:pw2&quot; \</span><br><span class="line">-v ~/user_configs:/app/res/user_configs \</span><br><span class="line">--pull=always \</span><br><span class="line">--restart always \</span><br><span class="line">--memory=1.0G \</span><br><span class="line">samge/apk-copilot:latest</span><br></pre></td></tr></table></figure><h2 id="本地源码运行"><a href="#本地源码运行" class="headerlink" title="本地源码运行"></a>本地源码运行</h2><ul><li><p>安装依赖<br>先按<code>版本信息</code>配置本地环境，然后创建python的env环境，安装python依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>复制配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp config.dev.json config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -R 本地路径xxx/build-tools/31.0.0 res/build-tools/31.0.0</span><br></pre></td></tr></table></figure></li><li><p>运行</p><blockquote><p>gradio界面</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn app:app --reload --host 0.0.0.0 --port 7860</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h2><p><img src="https://github.com/Samge0/apk-copilot/raw/main/res/screenshot/%E4%B8%80%E9%94%AE%E6%89%93%E5%A4%9A%E6%B8%A0%E9%81%93%E5%8C%85&%E7%AD%BE%E5%90%8D.png" alt="一键打多渠道包&amp;签名"><br><img src="https://github.com/Samge0/apk-copilot/raw/main/res/screenshot/%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE.jpg" alt="密钥配置"><br><img src="https://github.com/Samge0/apk-copilot/raw/main/res/screenshot/%E6%B8%A0%E9%81%93%E9%85%8D%E7%BD%AE.png" alt="渠道配置"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ApkCopilot </tag>
            
            <tag> 多渠道打包 </tag>
            
            <tag> apk签名 </tag>
            
            <tag> 360加固 </tag>
            
            <tag> samge </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode Samge Translate 翻译助手 插件</title>
      <link href="/2024/06/06/vscode-samge-translate/"/>
      <url>/2024/06/06/vscode-samge-translate/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> <a href="https://github.com/Samge0/vscode-samge-translate">VSCode Samge Translate</a>是一个基于VSCode的<code>翻译插件</code>，提供了从<code>英文到中文</code>、从<code>中文到英文</code>的翻译功能，以及<code>中文转变量名</code>功能支持多规则变量名（<code>camelCase、capitalCase、constantCase、dotCase、headerCase、noCase、paramCase、pascalCase、pathCase、snakeCase</code>）转换操作。使用百度&#x2F;其他<code>翻译引擎API</code>来实现准确的翻译结果。<br></p><p>当前支持的翻译引擎包括：<code>百度</code>、<code>阿里</code>、<code>腾讯</code>、<code>火山</code>、<code>有道</code>、<code>DeepL</code>。<br></p><p>这个GIF展示本插件的翻译功能交互，翻译结果可在选中文本后面展示、OUTPUT面板展示、右下角提示框展示、鼠标放在文本上悬浮展示，这些展示方式可在配置中开启或关闭。<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/SamgeTranslateDisplay.gif" alt="SamgeTranslateDisplay"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>您可以通过VSCode扩展市场搜索 <code>VSCode Samge Translate</code> 来安装此插件。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li><strong>英文翻译成中文</strong>：可以将选中的英文文本翻译成中文。</li><li><strong>英文翻译成中文-自动替换</strong>：可以将选中的英文文本翻译成中文，并自动替换原选择文本。</li><li><strong>中文翻译成英文</strong>：可以将选中的中文文本翻译成英文。</li><li><strong>中文翻译成英文-自动替换</strong>：可以将选中的中文文本翻译成英文，并自动替换原选择文本。</li><li><strong>中文转变量名-自动替换</strong>：支持将中文自动转换成多种编程命名格式的英文变量名。</li><li><strong>配置灵活</strong>：可通过VSCode设置自定义翻译引擎参数等。</li></ul><h3 id="快捷键信息（可自行修改）"><a href="#快捷键信息（可自行修改）" class="headerlink" title="快捷键信息（可自行修改）"></a>快捷键信息（可自行修改）</h3><table><thead><tr><th>命令名称</th><th>预置快捷键（Windows&#x2F;Linux）</th><th>预置快捷键（macOS）</th></tr></thead><tbody><tr><td>Samge Translate：英译中-en2zh</td><td>alt+x</td><td>alt+x</td></tr><tr><td>Samge Translate：英译中并替换-en2zhReplace</td><td>ctrl+shift+alt+x</td><td>ctrl+shift+alt+x</td></tr><tr><td>Samge Translate：中译英-zh2en</td><td>alt+z</td><td>alt+z</td></tr><tr><td>Samge Translate：中译英并替换-zh2enReplace</td><td>ctrl+shift+alt+z</td><td>ctrl+shift+alt+z</td></tr><tr><td>Samge Translate：中文转变量名-zh2var</td><td>shift+alt+w</td><td>shift+alt+w</td></tr></tbody></table><h3 id="配置项信息"><a href="#配置项信息" class="headerlink" title="配置项信息"></a>配置项信息</h3><table><thead><tr><th>配置项</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>samge.translate.enable</td><td>boolean</td><td>true</td><td>是否启用插件</td></tr><tr><td>samge.translate.enableHover</td><td>boolean</td><td>false</td><td>是否在鼠标悬浮时自动翻译</td></tr><tr><td>samge.translate.enableOutput</td><td>boolean</td><td>true</td><td>是否在OUTPUT窗口展示</td></tr><tr><td>samge.translate.enableRightDisplay</td><td>boolean</td><td>true</td><td>是否在选中文本右侧展示翻译结果</td></tr><tr><td>samge.translate.languageFrom</td><td>string</td><td>en</td><td>翻译源语言</td></tr><tr><td>samge.translate.languageTo</td><td>string</td><td>zh</td><td>翻译目标语言</td></tr><tr><td>samge.translate.providerName</td><td>string</td><td>baidu</td><td>翻译引擎提供者</td></tr><tr><td>samge.translate.providerAppId</td><td>string</td><td></td><td>翻译引擎的AppId</td></tr><tr><td>samge.translate.providerAppSecret</td><td>string</td><td></td><td>翻译引擎的AppSecret</td></tr><tr><td>samge.translate.limitSingleMaximum</td><td>integer</td><td>1000</td><td>单次翻译最大字符限制</td></tr></tbody></table><h2 id="快捷键和配置的编辑方法"><a href="#快捷键和配置的编辑方法" class="headerlink" title="快捷键和配置的编辑方法"></a>快捷键和配置的编辑方法</h2><p>您可以通过以下步骤来编辑快捷键和配置项：</p><ol><li><strong>编辑快捷键</strong>：在VSCode中，通过 <code>File &gt; Preferences &gt; Keyboard Shortcuts</code> (文件 &gt; 首选项 &gt; 键盘快捷方式) 来设置您的快捷键（可搜索关键词<code>samge</code>快速定位相关配置项）。</li><li><strong>编辑配置</strong>：在VSCode中，通过 <code>File &gt; Preferences &gt; Settings &gt; Extensions &gt; Vscode Samge Translate Configuration</code> (文件 &gt; 首选项 &gt; 设置 &gt; 扩展 &gt; Vscode Samge Translate Configuration) 来设置您的配置项（可搜索关键词<code>samge</code>快速定位相关配置项）。</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li><p><a href="">如何获取appId和appSecret</a>？</p><ul><li><a href="https://api.fanyi.baidu.com/api/trans/product/prodinfo">百度</a>：5万免费字符&#x2F;月 (个人认证后可切换高级版：100w免费字符&#x2F;月)</li><li><a href="https://www.aliyun.com/product/ai/base_alimt?source=5176.11533457&userCode=wsnup3vv">阿里</a>：：100万免费字符&#x2F;月</li><li><a href="https://cloud.tencent.com/document/product/551/35017?fromSource=gwzcw.1293314.1293314.1293314&cps_key=963fb04b6aae26f0014088af393dccf1">腾讯</a>：：500万免费字符&#x2F;月</li><li><a href="https://www.volcengine.com/docs/4640/68515">火山</a>：：200万免费字符&#x2F;月</li><li><a href="https://ai.youdao.com/DOCSIRMA/html/trans/price/wbfy/index.html">有道</a>：：新账号有50元固定免费体验额度</li><li><a href="https://www.deepl.com/zh/pro#developer">deepl</a>：：50万免费字符&#x2F;月</li></ul></li><li><p>当前支持的翻译引擎有哪些？</p><ul><li><input checked="" disabled="" type="checkbox"> 百度 (baidu)</li><li><input checked="" disabled="" type="checkbox"> 阿里 (alibaba)</li><li><input checked="" disabled="" type="checkbox"> 腾讯 (tencent)</li><li><input checked="" disabled="" type="checkbox"> 火山 (volcano)</li><li><input checked="" disabled="" type="checkbox"> 有道 (youdao)</li><li><input checked="" disabled="" type="checkbox"> DeepL (deepl)</li></ul></li><li><p>当前支持的翻译语言有哪些？</p><ul><li><input checked="" disabled="" type="checkbox"> en</li><li><input checked="" disabled="" type="checkbox"> zh</li></ul></li></ul><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p><a href="https://github.com/Samge0/vscode-samge-translate/blob/main/CHANGELOG.md">点击这里查看更新记录&gt;&gt;</a></p><hr><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>如果您有任何建议或代码贡献，欢迎通过GitHub仓库提交问题或拉取请求。</p><h2 id="版权和许可"><a href="#版权和许可" class="headerlink" title="版权和许可"></a>版权和许可</h2><p>此VSCode插件遵循MIT许可证发布。</p><h3 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h3><p>自动缓存翻译引擎配置参数，方便切换：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/SamgeTranslateConfigAutoCache.gif" alt="SamgeTranslateConfigAutoCache"></p><p>翻译的多种结果展示方式：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/TranslateDisplayStyle.png" alt="TranslateDisplayStyle"></p><p>中文转变量名（中英混合&#x2F;纯英文也可以转不同驼峰规则变量名）：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/TestCustomVariables.png" alt="TestCustomVariables"></p><p>自定义快捷键.gif：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/KeyboardShortcuts.gif" alt="KeyboardShortcuts.gif"></p><p>自定义快捷键：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/KeyboardShortcuts.png" alt="KeyboardShortcuts"></p><p>配置信息.gif：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/ExtensionsVscodeSamgeTranslateConfiguration.gif" alt="ExtensionsVscodeSamgeTranslateConfiguration.gif"></p><p>配置信息：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/ExtensionsVscodeSamgeTranslateConfiguration.png" alt="ExtensionsVscodeSamgeTranslateConfiguration"></p><p>增加光标左侧连续汉字转英文功能（默认没有开启，需要到插件配置中勾选并启用该功能）:<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/KeyboardShortcutsAndZh2varNew.gif" alt="KeyboardShortcutsAndZh2varNew"></p><p><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/KeyboardShortcutsAndZh2varNew.png" alt="KeyboardShortcutsAndZh2varNew"></p><h3 id="Dev"><a href="#Dev" class="headerlink" title="Dev"></a>Dev</h3><p><a href="https://github.com/Samge0/vscode-samge-translate/blob/main/README-dev.md">点击这里查看插件开发相关内容&gt;&gt;</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> samge </tag>
            
            <tag> tools </tag>
            
            <tag> vscode </tag>
            
            <tag> vscode插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2突然无法ping通宿主机的问题处理</title>
      <link href="/2024/06/06/wsl2-ping-unreachable/"/>
      <url>/2024/06/06/wsl2-ping-unreachable/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>windows下的docker用得好好的，但突然有一天docker容器无法访问宿主机中的代理，进入容器发现无法ping通宿主机。（我只是个小呆瓜，我也很懵啊）<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/293ab6c5-d899-4581-97ee-e321e9572395" alt="image"></p><p>经过重重排查，发现是wsl2中的网络配置问题，这里简单记录一下。</p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程&gt;&gt;&gt;"></a>处理过程&gt;&gt;&gt;</h2><h3 id="1、检查网络配置"><a href="#1、检查网络配置" class="headerlink" title="1、检查网络配置"></a>1、检查网络配置</h3><p>查看wsl2网络配置跟宿主机网络配置是否一致</p><p>分别在wsl2虚拟机中执行<code>ifconfig</code>跟在windows中执行<code>ipconfig /all</code>，发现wsl2中的ip为<code>172.24.101.x</code>，windows中的WSL桥适配器的ip是<code>172.24.96.x</code>，需要将wsl2中的ip改成windows中WSL桥适配器同一网段的ip。<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/4d27e4e2-b438-4bba-85e7-94adc2d890db" alt="image"></p><h3 id="2、修改配置"><a href="#2、修改配置" class="headerlink" title="2、修改配置"></a>2、修改配置</h3><p>修改wsl2中的ip（例如这里修改为<code>172.24.96.100</code>）</p><ul><li>【可选】在wsl2终端中临时修改，用于测试是否可行：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 172.24.96.100 netmask 255.255.240.0</span><br><span class="line">sudo route add default gw 172.24.96.1 eth0</span><br></pre></td></tr></table></figure></li><li>【推荐】修改wsl2虚拟机中的配置文件<code>/etc/netplan/01-netcfg.yaml</code>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | tee /etc/netplan/01-netcfg.yaml</span><br><span class="line">network:</span><br><span class="line">version: 2</span><br><span class="line">ethernets:</span><br><span class="line">    eth0:</span><br><span class="line">    dhcp4: no</span><br><span class="line">    addresses: [172.24.96.100/20]</span><br><span class="line">    gateway4: 172.24.96.1</span><br><span class="line">    nameservers:</span><br><span class="line">        addresses: [8.8.8.8]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>  然后执行 <code>sudo netplan apply</code> 使配置生效</li></ul><h3 id="3、验证结果"><a href="#3、验证结果" class="headerlink" title="3、验证结果"></a>3、验证结果</h3><p>修改wsl2的ip配置后，可以正常ping通宿主机了。<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/c318db43-5f42-4430-a1a9-9f0632540f6c" alt="image"></p><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明&gt;&gt;&gt;"></a>其他说明&gt;&gt;&gt;</h2><h3 id="1、参考文章"><a href="#1、参考文章" class="headerlink" title="1、参考文章"></a>1、参考文章</h3><ul><li><a href="https://www.jianshu.com/p/ba2cf239ebe0">WSL2 网络异常排查 [ping 不通、网络地址异常、缺少默认路由、被宿主机防火墙拦截]</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wls2 </tag>
            
            <tag> docker </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/27/hello-world/"/>
      <url>/2024/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Hi-guys"><a href="#Hi-guys" class="headerlink" title="Hi guys"></a>Hi guys</h2><p>my name is samge, nice to meet you.</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
