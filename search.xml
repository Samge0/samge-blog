<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>提高追番效率：使用暴力猴脚本实现一键自动切换集数并跳过片头片尾</title>
      <link href="/2024/07/07/tools-script-video-next-play/"/>
      <url>/2024/07/07/tools-script-video-next-play/</url>
      
        <content type="html"><![CDATA[<p>在某个动漫网站追番时，每次都要手动切换集数和调整进度以跳过片头片尾，这实在是太麻烦了。为了简化这个过程，我临时起意，让GPT帮忙编写了一个暴力猴（Tampermonkey）脚本，实现<code>&quot;一键自动切换下一集并跳过片头&quot;</code>的功能。</p><p>这个脚本让观看动漫的体验变得更加顺畅。现在，只需点一下按钮，就可以切换到下一集并自动跳过片头，极大地节省了重复操作的时间。</p><p>当然，也可以通过简单的设置实现全自动播放的功能，比如自动监听播放到片尾位置并切换到下一集。目前我观看的动漫片尾时间不固定，暂时没有配置全自动切换播放的功能。当前这个一键切换下一集的手动功能，已经解放了大量的重复时间，让观影体验更为愉悦。</p><p>以下是这个脚本的基本逻辑：</p><ul><li><strong>一键切换下一集</strong>：无需手动选择下一集，只需点击一次按钮即可自动切换。</li><li><strong>自动跳过片头</strong>：在播放时自动跳过片头部分，直接进入正片。</li></ul><p>以下是本次脚本的代码记录：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         切换下一集按钮</span></span><br><span class="line"><span class="comment">// @namespace    Violentmonkey Scripts</span></span><br><span class="line"><span class="comment">// @match        https://www.mxdmp.com/play/*/1/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    button.<span class="property">innerHTML</span> = <span class="string">&#x27;切换下一集&#x27;</span>;</span><br><span class="line">    button.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span><br><span class="line">    button.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;20px&#x27;</span>;</span><br><span class="line">    button.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;20px&#x27;</span>;</span><br><span class="line">    button.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">&#x27;10000&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(button);</span><br><span class="line"></span><br><span class="line">    button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> currentUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">        <span class="keyword">let</span> match = currentUrl.<span class="title function_">match</span>(<span class="regexp">/https:\/\/www\.mxdmp\.com\/play\/(\d+)\/1\/(\d+)\//</span>);</span><br><span class="line">        <span class="keyword">if</span> (!match) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> dramaId = match[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> currentEpisode = <span class="built_in">parseInt</span>(match[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> nextEpisode = currentEpisode + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> jumpTime = <span class="number">3</span> * <span class="number">60</span> + <span class="number">30</span>; <span class="comment">// 第三分半钟的秒数</span></span><br><span class="line">        <span class="keyword">let</span> nextUrl = <span class="string">`https://www.mxdmp.com/play/<span class="subst">$&#123;dramaId&#125;</span>/1/<span class="subst">$&#123;nextEpisode&#125;</span>/?jumpTime=<span class="subst">$&#123;jumpTime&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳转到下一集</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = nextUrl;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当页面加载完毕时设置播放进度</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>);</span><br><span class="line">        <span class="keyword">let</span> jumpTime = params.<span class="title function_">get</span>(<span class="string">&#x27;jumpTime&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (jumpTime) &#123;</span><br><span class="line">            <span class="keyword">let</span> player = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.art-video&#x27;</span>); <span class="comment">// s根据实际情况获取视频元素</span></span><br><span class="line">            <span class="keyword">if</span> (player) &#123;</span><br><span class="line">                player.<span class="property">currentTime</span> = <span class="built_in">parseInt</span>(jumpTime);</span><br><span class="line">                player.<span class="title function_">play</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想要播放到指定进度时自动播放下一集，可参考下面脚本（例如这里播放到<code>18:30</code>时自动播放下一集，完全自动化，解放双手）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         切换下一集按钮</span></span><br><span class="line"><span class="comment">// @namespace    Violentmonkey Scripts</span></span><br><span class="line"><span class="comment">// @match        https://www.mxdmp.com/play/*/1/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    button.<span class="property">innerHTML</span> = <span class="string">&#x27;切换下一集&#x27;</span>;</span><br><span class="line">    button.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span><br><span class="line">    button.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;20px&#x27;</span>;</span><br><span class="line">    button.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;20px&#x27;</span>;</span><br><span class="line">    button.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">&#x27;10000&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(button);</span><br><span class="line"></span><br><span class="line">    button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">switchToNextEpisode</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">switchToNextEpisode</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> currentUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">        <span class="keyword">let</span> match = currentUrl.<span class="title function_">match</span>(<span class="regexp">/https:\/\/www\.mxdmp\.com\/play\/(\d+)\/1\/(\d+)\//</span>);</span><br><span class="line">        <span class="keyword">if</span> (!match) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> dramaId = match[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> currentEpisode = <span class="built_in">parseInt</span>(match[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> nextEpisode = currentEpisode + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> jumpTime = <span class="number">3</span> * <span class="number">60</span> + <span class="number">30</span>; <span class="comment">// 第三分半钟的秒数</span></span><br><span class="line">        <span class="keyword">let</span> nextUrl = <span class="string">`https://www.mxdmp.com/play/<span class="subst">$&#123;dramaId&#125;</span>/1/<span class="subst">$&#123;nextEpisode&#125;</span>/?jumpTime=<span class="subst">$&#123;jumpTime&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳转到下一集</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = nextUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动切换到下一集的逻辑</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">autoSwitchNextEpisode</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> player = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.art-video&#x27;</span>); <span class="comment">// 根据实际情况获取视频元素</span></span><br><span class="line">        <span class="keyword">if</span> (!player) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        player.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeupdate&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 如果视频当前时间超过18:40秒，执行切换到下一集的操作</span></span><br><span class="line">            <span class="keyword">if</span> (player.<span class="property">currentTime</span> &gt;= <span class="number">18</span> * <span class="number">60</span> + <span class="number">40</span>) &#123;</span><br><span class="line">                <span class="title function_">switchToNextEpisode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当页面加载完毕时设置播放进度</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>);</span><br><span class="line">        <span class="keyword">let</span> jumpTime = params.<span class="title function_">get</span>(<span class="string">&#x27;jumpTime&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (jumpTime) &#123;</span><br><span class="line">            <span class="keyword">let</span> player = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.art-video&#x27;</span>); <span class="comment">// 根据实际情况获取视频元素</span></span><br><span class="line">            <span class="keyword">if</span> (player) &#123;</span><br><span class="line">                player.<span class="property">currentTime</span> = <span class="built_in">parseInt</span>(jumpTime);</span><br><span class="line">                player.<span class="title function_">play</span>();</span><br><span class="line">                <span class="title function_">autoSwitchNextEpisode</span>(); <span class="comment">// 启动自动切换下一集的监听</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 追番 </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 暴力猴 </tag>
            
            <tag> 油猴 </tag>
            
            <tag> 自动播放 </tag>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生命的脆弱与意义：在世俗压力中的自我追寻</title>
      <link href="/2024/07/05/life-1/"/>
      <url>/2024/07/05/life-1/</url>
      
        <content type="html"><![CDATA[<p>在这个快节奏、高压力的社会中，我们常常被生活的重担压得喘不过气来。今天，一段短视频深深触动了我的心弦，它讲述了一位中金公司的女职员，在公司降薪、房贷压力和产后抑郁的多重打击下，最终选择了一条不归路。她曾是海外留学的佼佼者，成绩斐然，性格阳光。然而，生活的种种琐碎和职场的挫败，让她在人生的十字路口迷失了方向，令人唏嘘。</p><p>我曾多次思索，人类是多么的脆弱。似乎不管多美好的事物，最后都有凋零的一天，只是这一天来得迟或来得早罢了。这或许有种种悲观的虚无主义，但却是我们不得不面对的现实。在人生的不同阶段，我们追求的目标也在不断变化。有时候，当我们达到某个高度后，似乎选择变得少了，但其实，是我们开始忽视了那些曾被我们珍视的选择。</p><p>我觉得每个人都应该去探索和追求自己生命的意义，并努力去实现自己想要实现的，而不是追逐世俗的标准。我们要学会接受生命的有限性，认识到”人终有一死”这一不可逆转的事实，这样我们就不会总是活在对未知的恐惧和对未完成愿望的焦虑中。</p><p>我曾多次思考类似“突然暴毙”这类问题，但并没有较好好的总结。也曾想过构建一个<code>XX天多次尝试失败后，自动发自己讣告及遗愿的自动程序</code>，因为感到好多人似乎突然消失后就是真的消失了，仿佛从未来过这个世界一般。曾经的一切都慢慢湮灭，消失在历史的长河。就像泡沫一般，bo，爆了，没了，消失了。除了有限的观察者外，还有谁记得其曾经来过？</p><p>目前我的想法是，人总有一死，总有遗憾。每个人或许只是宇宙这个庞大模型中的一个微小变量。我们的离去，或许对整个模型的演进影响微乎其微，毕竟有的模型训练每次还随机kill掉一些。我们只不过是一种偶然的变量，这一次训练迭代中出现，诞生了一个有我们参与的模型。这不能说明我们这个变量非常重要，我们所做的事，我们未完成的事有多重要，只能说我们对当前这个模型的演变有那么一丢丢的影响罢了。</p><p>如果世界是不同模型的迭代推演，那我们作为变量，在其他模型中是可有可无的，因为我们并不在其他模型的运算权重之中。</p><p>但这并不意味着我们的存在和追求毫无意义。我们对当前这个模型的演变，有着自己独特的影响。如果世界是由无数个模型的迭代和推演构成的，那么我们作为其中的变量，虽然在其他模型中可能无足轻重，但在我们自己的模型中，我们却是不可或缺的。</p><p>想开一些，接受会死亡的事实，接受突然暴毙的事实，拥抱生命的有限，接受生活的不确定性。然后热爱每一天，过好每一天，不再为世俗的那些东西乱了心神。做好自己，追求内心的热爱，而不是世俗的规则&#x2F;荣耀榜单。</p><p>愿我们在自己的小世界里，建立属于自己的荣誉榜单，活出真正的自我。</p><p>愿我们都能勇敢地追寻心中的梦想，不受世俗的羁绊，活出属于自己的精彩人生。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 思考 </tag>
            
            <tag> 意义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未来相关的一些畅想</title>
      <link href="/2024/06/19/dream/"/>
      <url>/2024/06/19/dream/</url>
      
        <content type="html"><![CDATA[<ul><li>将迎来类似航海时代那样的大航空时代，一批又一批的勇士不断冲破苍穹，踏上银河的星际探索之旅。</li><li>AI跟机器人的加速融合，非侵入式脑机的进一步成熟，人们可以用脑机远控地外机器人进行作业任务。</li><li>AI对各行业的进一步渗透，诞生更多新奇的东西+创造新的岗位。</li><li>AI生成视频的质量越来越成熟，有望像2023年初SD那样迎来井喷式的应用。期望以后有产品像《西部世界》中那样，用语音讲故事，然后实时修改故事创作者想要的视频场景。每个人都是一个富有创意的导演，言出法随。</li><li>小巧的可悬浮跟随使用者的机器人，可以通过脑机或语音执行任务，例如：录像、拍照、微表情识别、xx范围内的危险预测、各种识别、随身携带的智能联网知识库、路线规划等。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 未来 </tag>
            
            <tag> 科技 </tag>
            
            <tag> 畅想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册并激活Wise账户</title>
      <link href="/2024/06/19/register-wise/"/>
      <url>/2024/06/19/register-wise/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前注册 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 遇到无法使用国内外币卡入金激活账户的问题，最近刚好开了新加坡华侨银行OCBC卡，便改用 OCBC 入金 30 新币（SGD）激活 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户。</p><h2 id="整体流程（耗时4天）"><a href="#整体流程（耗时4天）" class="headerlink" title="整体流程（耗时4天）"></a>整体流程（耗时4天）</h2><p>实际大部分人都是当天注册就能激活，这里耗时这么久是我自己踩坑了。</p><ul><li>20240615 PC端使用护照注册 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户并使用 OCBC 卡扫二维码入金 30SGD，刚好是周六，提示要到18号才能审核完毕</li><li>20240618 依旧提示审核中，邮件联系客服，咨询进度，得到的回复是需要耐心等待</li><li>20240619 尝试改用绑卡的方式，输入 OCBC 卡号、日期、CVV，再次入金 30SGD，这次居然几分钟就审核完毕并成功激活 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户，之前那笔扫码入金的钱也立即到账了。</li></ul><h2 id="Wise-是什么"><a href="#Wise-是什么" class="headerlink" title="Wise 是什么"></a><a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 是什么</h2><p><a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 是什么？<a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 是一个跨境汇款工具，主要的功能就是用来汇款的，它的汇款汇率非常低；当然 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 也提供外币账户，如「美元账户」、「欧元账户」、「新加坡元账户」、「英镑账户」等。虽然 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 不提供港币账户和人民币账户，但是可以通过 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 把外币兑换成「人民币」提现到中国大陆的【支付宝、微信、银联卡】；也可以通过 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 把外币兑换成「港币」提现到你的香港银行卡。</p><p><a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 虽然提供外币账户，但它不是银行，无法把它当成银行来使用，它的主要功能是汇款，不建议把大资金放在 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 的外币账户。</p><h2 id="Wise-有什么用"><a href="#Wise-有什么用" class="headerlink" title="Wise 有什么用"></a><a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 有什么用</h2><p><a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 的用处非常多，被很多人称为「汇款神器」。如果你只是把它当成汇款工具，其实是把它想简单了，因为它还有别的用处。</p><p>那到底 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a>有什么用呢？<a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 可以用在以下几个方面：</p><ul><li>资金中转：资金到 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 后，可以换成人民币资金回国，可以换成港币到香港账户，可以换成新加坡币到新加坡华侨银行账户（OCBC）等等</li><li>入金美股券商：可以直接用美元、英镑、新加坡币等入金「盈透证券」、「富途牛牛」、「长桥证券」等美股券商</li><li>佣金收款：可以接受 Stripe 资金或部分返佣平台的佣金（USD、SGD等）</li><li>实体借记卡：非中国地址可以申请 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 实体 VISA 卡</li><li>订阅 ChatGPT Plus、Claude 3、Midourney 等境外 AI 服务：<a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 实体 VISA 卡可以直接用来订阅 ChatGPT 4</li><li>数字货币出金：Kraken 英镑可以出金到 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a>（USDT ➡️ Kraken ➡️ 在 Kraken 将 USDT 兑换成 GBP ➡️ <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> GBP 账户,需要联系 Kraken 客服开通英镑 GBP 的 FPS 系统）</li></ul><p>⚠️ 注意：虽然 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 可以通过更改「居住地址」到国外来申请 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> Visa 实体卡片，但该操作可能会遇到被风控而导致关户（额外要求你提供国外的地址证明），<strong>不建议通过更改地址去申请实体卡</strong>，毕竟境外实体卡有非常多的渠道可以申请到，但像 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 这样好用的账户却很少。没有必要捡了芝麻丢了西瓜，得不偿失。</p><h2 id="Wise-注册及入金激活流程"><a href="#Wise-注册及入金激活流程" class="headerlink" title="Wise 注册及入金激活流程"></a><a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 注册及入金激活流程</h2><p>在中国大陆，可以用全套中国资料去开户 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a>，<a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 的注册流程非常简单，大致如下：</p><ul><li>访问 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 官网</li><li>使用电子邮箱和手机号码注册 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户</li><li>使用中国护照认证 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户</li><li>使用新加坡华侨银行 OCBC 或香港银行卡同名入金激活 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户</li></ul><p>⚠️ 如果使用护照认证 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户时，遇到「Required」报错，可以采取以下办法：</p><ul><li>开启「无痕模式」再次护照认证</li><li>清除浏览器所有缓存及历史记录后，再次护照认证</li><li>在 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> APP 自助认证</li><li>在 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> APP 联系 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 客服协助认证</li></ul><p><a href="https://wise.com/invite/dic/chengbaos1">Wise</a> APP 下载：</p><ul><li>苹果手机在苹果商店搜索<code>Wise</code>下载</li><li>安卓手机在谷歌商店搜索<code>Wise</code>下载</li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>Q1.<a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 借记卡有什么用？</p><blockquote><p>订阅 ChatGPT Plus、海淘、绑定支付宝消费等</p></blockquote><p>Q2.<a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 可以入金哪些券商？</p><blockquote><p><a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 美元账户可以入金盈透证券、富途牛牛、嘉信理财、老虎证券等，<a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 新加坡币账户可以入金盈透证券、富途牛牛新加坡版</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>2024 年注册 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户、并同名入金激活 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户的方法总体还是比较简单的。只要你有新加坡华侨银行OCBC账户或香港银行账户，就可以马上入金激活 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a>。</p><p>我之前注册入金遇到要审核多天的情况，可能跟扫二维码入金的方式有关，后面尝试改用绑卡的方式入金 30SGD，几分钟就成功了。所以这里建议首次注册 <a href="https://wise.com/invite/dic/chengbaos1">Wise</a> 账户时，使用绑卡的方式（同一名字下的卡）入金，避免不必要的麻烦。</p><p>如果需要开通新加坡华侨银行 OCBC 卡，可以参考 <a href="https://blog.samgeai.com/2024/06/17/ocbc-card/">线上申请新加坡OCBC实体卡并成功激活的记录</a>。目前 OCBC 卡支持线上直接申请，还可以获得实体卡。</p>]]></content>
      
      
      
        <tags>
            
            <tag> OCBC </tag>
            
            <tag> Wise </tag>
            
            <tag> 激活 </tag>
            
            <tag> 注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线上申请新加坡OCBC实体卡并成功激活的记录</title>
      <link href="/2024/06/17/ocbc-card/"/>
      <url>/2024/06/17/ocbc-card/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2023年，新加坡华侨银行（简称OCBC）允许中国、香港、马来西亚和印尼的外籍客户在当地开设全数字银行账户。如果您需要新加坡的银行账户和借记卡，可以去申请。</p><p>本文仅供参考，不承担相应风险。如果您无法自行承担相应风险，请立即停止阅读。</p><h2 id="整体流程（耗时12天）"><a href="#整体流程（耗时12天）" class="headerlink" title="整体流程（耗时12天）"></a>整体流程（耗时12天）</h2><ul><li>20240601 在APP端提交申请并审核通过，手机APP端申请360账户（APP端申请默认会寄送实体卡）</li><li>20240603 发安全邮件咨询实体卡运单号</li><li>20240604 制卡完成并发出快递</li><li>20240607 下午收到邮件回复的运单号：RA74*****13SG</li><li>20240612 成功拿到OCBC实体卡，在APP端激活实体卡</li><li>20240613 通过工行同名账户电汇1050新币到OCBC卡，成功激活并获取15新币奖励</li></ul><h2 id="申请华侨银行（OCBC）账户有什么用处？"><a href="#申请华侨银行（OCBC）账户有什么用处？" class="headerlink" title="申请华侨银行（OCBC）账户有什么用处？"></a>申请华侨银行（OCBC）账户有什么用处？</h2><ul><li>可获得2个以上的新加坡银行账户</li><li>可以更加方便的进行跨境收付款</li><li>可购买港股、美股（参考：长桥证券、盈立证券）</li><li>可以申请借记卡，用于网上消费和全球消费</li><li>借记卡支持Apple Pay&#x2F;Google Pay移动支付</li><li>OCBC给WSIE入金秒到账<br>如果您没有上述需求或者不明白这个账户的用途，建议您不要申请。如果您有上述需求或明白此账户用途，请继续阅读。</li></ul><h2 id="关于新加坡华侨银行"><a href="#关于新加坡华侨银行" class="headerlink" title="关于新加坡华侨银行"></a>关于新加坡华侨银行</h2><p>华侨银行是新加坡三大本地银行之一，总部设在新加坡，成立于1932年，是新加坡历史最悠久的银行之一。网站和APP支持中文，且有中文客服。</p><h2 id="申请华侨银行（OCBC）账户"><a href="#申请华侨银行（OCBC）账户" class="headerlink" title="申请华侨银行（OCBC）账户"></a>申请华侨银行（OCBC）账户</h2><p>首先您需要准备以下资料&#x2F;文件：</p><ul><li>安卓或苹果手机，且支持NFC功能</li><li>护照</li><li>身份证</li><li>中国大陆手机号</li><li>准备1020及以上SGD入金验证</li></ul><p>先去苹果或者Google商店搜索“OCBC Digital”进行安装，或者直接访问下面的地址：</p><ul><li>Google Play：<a href="https://play.google.com/store/apps/details?id=com.ocbc.mobile">https://play.google.com/store/apps/details?id=com.ocbc.mobile</a></li><li>App Store：<a href="https://apps.apple.com/app/ocbc-digital-mobile-banking/id292506828">https://apps.apple.com/app/ocbc-digital-mobile-banking/id292506828</a></li></ul><p>打开“OCBC Digital”根据界面要求如实填写信息，邀请码填写：<code>632S37JB</code>，使用邀请码后1个月内入金1000 SGD可额外获得15 SGD赠金（有人测试了不输入邀请码也可以获得15 SGD赠金，但稳妥起见，建议输入邀请码）。</p><p>如果APP打开闪退或者黑屏请尝试完全关闭后重新打开，另外国内网络可能加载较慢。线上开户大致步骤如下：</p><ul><li>要求填写手机号（使用国内手机号就行）</li><li>会要求使用手机NFC功能感应护照（放在护照上不动即可，自动读取）</li><li>要求拍摄护照</li><li>身份证拍照</li><li>要求视频验证</li></ul><p>信息务必真实填写，不然可能影响开户，整个申请过程大概几分钟完成，运气好的用户可能秒开，运气不好可能会触发人工审核，审核周期是7个工作日内。同时开户过程中，下面的信息请牢记：</p><ul><li>会要求您设置一个用户名，这个用户名是用来登录网页版的，<strong>请牢记</strong></li><li>会要求您设置6位数字的PIN（用来登录网页版需要），<strong>请牢记</strong></li><li>会要求手机绑定OneToken（可以理解为一个安全的二次认证工具）</li></ul><p>注意：核过程中请不要退出“OCBC Digital”当前用户状态，不然后面审核通过后可能您无法登录，陷入死循环。(有博主提示卸载app会导致OneToken失效，如果已经提交申请了，建议不要随意卸载该APP，避免不必要的麻烦)</p><p>审核通过后，默认给您开通了2个新加坡银行账户，分别是：</p><ul><li>Statement Savings Account（STS）</li><li>Global Savings Account（GSA）</li></ul><p>这2个账户可用来收款或者对外转账。</p><h2 id="入金激活OCBC"><a href="#入金激活OCBC" class="headerlink" title="入金激活OCBC"></a>入金激活OCBC</h2><p>开户成功后需要同名账户在1个月内入金1000 SGD以上激活OCBC.</p><p>据网友反馈，OCBC加强了验证，已不支持WISE首次入金激活，且未激活账户的情况下所有入金都会被拒收。</p><p>本人使用<code>工商银行</code>入金激活方式：</p><ul><li>购买1020及以上的SGD汇（购买大于1000新币是避免入账时扣的手续费，我本次入金扣了8新比，例如我汇入1050，实际到账1042）</li><li>跨境汇款，填写收款人信息，提交汇款</li></ul><p>填写以下信息：</p><ul><li>名字：您名字的拼音，比如你叫张三丰，那么名字就填写：SANFENG（注意是您华侨银行开户时用的名字）</li><li>姓：比如你叫张三丰，那么姓就是：ZHANG（注意是您华侨银行开户时用的姓）</li><li>SWIFT码：OCBCSGSG</li><li>收款银行：OVERSEA-CHINESE BANKING CORPORATION LIMITED</li><li>银行账号：您在“OCBC Digital”的STS账户上看到的账户号码（注意：是账户号码，不是银行卡号码，号码不需要-符号）</li><li>街道及门牌号：63 Chulia Street 10-00， OCBC Centre East， Singapore 049514</li><li>汇款用途：旅游</li></ul><p>如果您成功给OCBC账户入金1000 SGD以上（需要同名账户），那么等待几个小时会将15 SGD赠金发送到您的账户中（这个赠金不是实时到账的）</p><h2 id="修改您的OCBC邮寄地址（可跳过）"><a href="#修改您的OCBC邮寄地址（可跳过）" class="headerlink" title="修改您的OCBC邮寄地址（可跳过）"></a>修改您的OCBC邮寄地址（可跳过）</h2><p>在申请OCBC账户的时候已经填写了居住地址，APP会自动将中文地址给您翻译成英文，如果地址不准确，可通过下面的方法修改。如果地址正确，或者不需要申请借记卡，可略过此步骤。</p><p>OCBC网页版登录地址：<a href="https://internet.ocbc.com/internet-banking/">https://internet.ocbc.com/internet-banking/</a></p><p>登录网页版会要求您填写：</p><ul><li>Access Code：就是您当初开设账户时设置的名称</li><li>PIN：您开设账户时设置的6位数字PIN码</li></ul><p>这时会弹出“OneToken”的二次认证，然后打开“OCBC Digital”的APP，先不要马上验证指纹进入APP，点击右下方的“更多服务（More）”，找到“OneToken”，获取6位认证码，填写到网页中进行登录。</p><p>把OCBC网页版改成了中文语言，点击导航栏上面的“客户服务 - 更改邮寄地址”</p><p>直接勾选您的所有账户，然后下一页。</p><p>然后填写新的地址信息：</p><ul><li>地址类型：海外</li><li>地址栏1：填写您的手机号，街道地址（用ChatGPT帮你翻译）</li><li>地址栏2：填写您的区，城市（可以用拼音）</li><li>地址栏3：您住址所在的邮编</li><li>国家&#x2F;地区：China</li></ul><p>下一页，保存确认地址即可。这里在地址栏1填写您手机号的目的是OCBC可能不会在物流信息上打印你的手机号，导致快递员可能无法正常联系到您。</p><p>(提交申请后可通过APP的安全邮箱联系客服获取运单追踪号，后续运到国内后一般会显示快递员的联系方式，你也可以主动短信&#x2F;电话联系快递员说明中文的派送地址)</p><h2 id="申请OCBC-360-Account"><a href="#申请OCBC-360-Account" class="headerlink" title="申请OCBC 360 Account"></a>申请OCBC 360 Account</h2><p>在APP端申请OCBC 360 Account可额外开通一个账户，且默认分配一张VISA实体借记卡，这张实体借记卡可用于海外消费（比如支付ChatGPT Plus），ATM取款等。如果您不需要实体借记卡，可略过此步骤。</p><p>回到“OCBC Digital”APP上，点左侧导航栏“申请 - 账户 - 360 Account”，根据步骤提示进行填写。</p><p>注意：</p><ul><li>申请360 Account不建议选择自雇（可能触发人工审核）</li><li>名字建议保持默认（否则可能触发人工审核）</li><li>如果触发人工审核，可能出现有户无卡的情况</li></ul><p>借记卡默认用挂号信方式寄出，可以在“APP上左侧导航 —— 安全邮箱 —— 发送英文邮件”索要物流追踪号码，然后通过EMS单号进行查询。</p><p>查询物流可通过下面的链接查询：</p><ul><li><a href="https://www.17track.net/en">https://www.17track.net/en</a></li><li><a href="https://www.singpost.com/track-items">https://www.singpost.com/track-items</a></li></ul><h2 id="境内消费"><a href="#境内消费" class="headerlink" title="境内消费"></a>境内消费</h2><p>如果有申请360借记卡的用户，可以在国内刷卡或者ATM消费（有手续费，不太建议）</p><p>将“OCBC Digital”更新到最新后可扫商户银联码消费，也可以扫支付宝收款码进行消费</p><p>扫支付宝收款码进行消费，无手续费，但是存在2%汇损，适合临时应急使用，不适合大额消费。</p><h2 id="关于管理费"><a href="#关于管理费" class="headerlink" title="关于管理费"></a>关于管理费</h2><p>在第一年，OCBC 的所有账户都是免管理费的；OCBC 是从第二年开始收取账户管理费，OCBC 各账户收费如下：</p><ul><li>STS 账户（Statement Savings Account）：外国人日均存款不超过2万新元，首年免管理费；否则每月收取 10 新币（50 块人民币左右）管理费</li><li>GSA 账户（Globle Savings Account）：第二年及之后也不收管理费。但它不能作为主账户，必须有一个新币账户作为主账户</li><li>360 账户：外国人日均存款不超过 3000 新币（16000多人民币），首年免管理费；否则每月收取 2 新币（10多人民币左右）管理费</li><li>MSA 账户（Monthy Savings Account）：第二年开始每年存满 500 新币，首年免管理费；否则每月收取 2 新币（10多人民币左右）管理费<br>建议保留GSA账户配合360账户或MSA账户使用，MSA账户需在OCBC网页版进行开通。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>注意汇入时如果是选择双方承担手续费，则会入后OCBC那边也会收入手续费。为避免单笔汇入大于1000 SGD，最好会入金大于1020SGD稳妥些。</li><li>中国大陆用户可以使用“OCBC Digital”申请新加坡OCBC银行账户，使用邀请码：<code>632S37JB</code>可获得15 SGD赠金（需满足30天内单笔汇入大于1000 SGD）</li><li>首次激活必须同名账户，例如这里用的工商银银行。</li><li>工商银行汇金的手续费相对较低，汇出去手续费40元，OCBC入账扣了8 SGD（大约40多人民币），总共耗损80多人民币。而激活成功后收到的15SGD赠金刚好填补这笔损耗。</li><li>如果您需要申请OCBC借记卡，需要先去网页版修改地址，然后再申请360 Account，申请360 Account时，职业不要选择自雇</li><li>OCBC的账户前一年基本都是免管理费的，1年后未达到最低存款要求会收取管理费。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> OCBC </tag>
            
            <tag> 新加坡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机漫步的傻瓜-随手记录</title>
      <link href="/2024/06/17/on-the-go/"/>
      <url>/2024/06/17/on-the-go/</url>
      
        <content type="html"><![CDATA[<ul><li>悬浮时代，先有后优</li><li>善始者实繁，克终者盖寡</li><li>撤退是为了更好地进攻，进攻是为了更好地撤退</li><li>有时候，慢即是快</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 随机漫步 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> 胡思乱想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLO+IOPaint组合，自动识别并移除水印的demo</title>
      <link href="/2024/06/06/yolo8-plus-iopaint/"/>
      <url>/2024/06/06/yolo8-plus-iopaint/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本demo使用<a href="https://github.com/ultralytics/ultralytics">ultralytics-YOLO8</a>对水印位置进行检测，然后使用<a href="https://github.com/Sanster/IOPaint">IOPaint</a>移除yolo识别的目标水印。</p><p>本demo中使用的<a href="models/last.pt">last.pt</a>模型来自<a href="https://github.com/Samge0/yolo8-watermark-brand">yolo8-watermark-brand</a>仓库。</p><p>本demo支持使用iopaint的api方式去除水印，只需在<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/remove_watermark_with_onnx.py">remove_watermark_with_onnx.py</a> 或 <a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/remove_watermark.py">remove_watermark.py</a>中配置<code>USE_IOPAINT_API=True</code>，可减少批量操作时iopaint命令行方式的初始化耗时。</p><p>如果配置<code>USE_IOPAINT_API=True</code>，需要先启动iopaint服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python iopaint_server.py</span><br></pre></td></tr></table></figure><p>当然，也可以选择对接单独部署的iopaint服务，只需要在<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/iopaint_api_utils.py">iopaint_api_utils.py</a>中配置自定义的<code>IOPAINT_SERVER_HOST</code>即可。</p><h2 id="当前开发环境使用的关键依赖版本"><a href="#当前开发环境使用的关键依赖版本" class="headerlink" title="当前开发环境使用的关键依赖版本"></a>当前开发环境使用的关键依赖版本</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python==3.8.18</span><br><span class="line">torch==2.3.0+cu118</span><br><span class="line">torchvision==0.18.0+cu118</span><br><span class="line">ultralytics==8.2.26</span><br><span class="line">IOPaint==1.3.3</span><br><span class="line">onnxruntime_gpu==1.18.0</span><br><span class="line"></span><br><span class="line"># the onnx dependency is to automatically export the onnx model at train time</span><br><span class="line">onnx==1.16.1</span><br><span class="line">onnx-simplifier==0.4.36</span><br><span class="line">onnxsim==0.4.36</span><br><span class="line">onnxslim==0.1.28</span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><p>【推荐】使用vscode的<code>Dev Containers</code>模式，参考<a href=".devcontainer/README.md">.devcontainer&#x2F;README.md</a></p></li><li><p>【可选】其他虚拟环境方式</p><ul><li>【二选一】安装torch-cpu版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision</span><br></pre></td></tr></table></figure></li><li>【二选一】安装torch-cuda版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118</span><br></pre></td></tr></table></figure></li><li>【必要】安装依赖  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="运行方式-demo1："><a href="#运行方式-demo1：" class="headerlink" title="运行方式-demo1："></a>运行方式-demo1：</h2><p><code>ultralytics + IOPaint（命令行方式）</code>，<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/remove_watermark.py">脚本：remove_watermark.py</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python remove_watermark.py</span><br></pre></td></tr></table></figure><h2 id="运行方式-demo2："><a href="#运行方式-demo2：" class="headerlink" title="运行方式-demo2："></a>运行方式-demo2：</h2><p><code>onnxruntime + IOPaint（命令行方式）</code>，<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/remove_watermark_with_onnx.py">脚本：remove_watermark_with_onnx.py</a><br>pt转onnx模型可参考<a href="https://github.com/Samge0/yolo8-plus-iopaint/blob/main/yolo_utils.py">yolo_utils.py</a>的mian函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python remove_watermark_with_onnx.py</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><blockquote><p>1、如果遇到<code>Could not locate zlibwapi.dll. Please make sure it is in your library path</code>错误，需要下载相关dll放置到目标位置：</p></blockquote><ul><li><a href="https://pan.baidu.com/s/1SrxZFkxwpwydn1fuFaWtgw?pwd=6cgb">点击下载：https://pan.baidu.com/s/1SrxZFkxwpwydn1fuFaWtgw?pwd=6cgb 提取码: 6cgb</a></li><li>lib文件放到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.x\lib</code> （这里以windows系统为例，其中<code>v11.x</code>是实际安装的cuda版本路径）</li><li>dll文件放到<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.x\bin</code> （这里以windows系统为例，其中<code>v11.x</code>是实际安装的cuda版本路径）</li></ul><h2 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h2><table><thead><tr><th align="center">before</th><th align="center">after</th></tr></thead><tbody><tr><td align="center"><img src="https://github.com/Samge0/yolo8-plus-iopaint/assets/17336101/801bdcef-88d7-449d-a48a-428e117b58ab" alt="before"></td><td align="center"><img src="https://github.com/Samge0/yolo8-plus-iopaint/assets/17336101/a465b913-4aa1-4c04-a12b-c0211d47b6bc" alt="after"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> samge </tag>
            
            <tag> yolo </tag>
            
            <tag> iopaint </tag>
            
            <tag> watermark </tag>
            
            <tag> models </tag>
            
            <tag> onnx </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用yolo训练品牌logo的水印检测模型的demo</title>
      <link href="/2024/06/06/yolo8-watermark-brand/"/>
      <url>/2024/06/06/yolo8-watermark-brand/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本demo使用<code>labelImg</code>对<code>26</code>张样本图片的水印位置进行标注，<a href="https://github.com/ultralytics/ultralytics">ultralytics-YOLO8</a>对水印位置进行模型训练&amp;检测。</p><p>如果需要使用 <a href="https://github.com/ultralytics/ultralytics">ultralytics-YOLO8</a> + <a href="https://github.com/Sanster/IOPaint">IOPaint</a> 进行组合，自动移除yolo识别的目标水印，请点击<a href="https://github.com/Samge0/yolo8-plus-iopaint">yolo8-plus-iopaint</a>仓库查看。</p><h2 id="当前开发环境使用的关键依赖版本"><a href="#当前开发环境使用的关键依赖版本" class="headerlink" title="当前开发环境使用的关键依赖版本"></a>当前开发环境使用的关键依赖版本</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python==3.8.18</span><br><span class="line">torch==2.3.0+cu118</span><br><span class="line">torchvision==0.18.0+cu118</span><br><span class="line">ultralytics==8.2.28</span><br><span class="line"></span><br><span class="line"># labelImg is used to label the training data</span><br><span class="line">labelImg==1.8.6</span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><p>【推荐】使用vscode的<code>Dev Containers</code>模式，参考<a href="https://github.com/Samge0/yolo8-watermark-brand/tree/main/.devcontainer">.devcontainer&#x2F;README.md</a></p></li><li><p>【可选】其他虚拟环境方式</p><ul><li>【二选一】安装torch-cpu版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision</span><br></pre></td></tr></table></figure></li><li>【二选一】安装torch-cuda版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118</span><br></pre></td></tr></table></figure></li><li>【必要】安装依赖  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py</span><br></pre></td></tr></table></figure><h2 id="推理"><a href="#推理" class="headerlink" title="推理"></a>推理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure><h2 id="自定义数据集进行训练："><a href="#自定义数据集进行训练：" class="headerlink" title="自定义数据集进行训练："></a>自定义数据集进行训练：</h2><ul><li><p>安装<code>labelImg</code></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install labelImg</span><br></pre></td></tr></table></figure></li><li><p>启动<code>labelImg</code></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">labelImg</span><br></pre></td></tr></table></figure></li><li><p>清理或备份旧的数据集，将需要训练的新数据图集放到<a href="datasets/data/images">datasets&#x2F;data&#x2F;images</a>目录，参与训练的图片宽高最好一致，训练前需要在<a href="train.py">train.py</a>中配置<code>imgsz</code>图片宽高信息</p></li><li><p>在<code>labelImg</code>打开<a href="datasets/data/images">datasets&#x2F;data&#x2F;images</a>的图集进行标注，保存格式选择<code>YOLO</code>（建议点击<code>File -&gt; YOLO</code>保存全局默认<code>YOLO</code>导出后，重新打开<code>labelImg</code>，可在后续保存标注时避免频繁切换导出格式）</p></li><li><p>标注完毕后，执行命令将<a href="datasets/data/images">datasets&#x2F;data&#x2F;images</a>拆分为<a href="datasets/data/train">datasets&#x2F;data&#x2F;train</a>、<a href="datasets/data/test">datasets&#x2F;data&#x2F;test</a>、<a href="datasets/data/val">datasets&#x2F;data&#x2F;val</a></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd datasets &amp;&amp; python Process.py</span><br></pre></td></tr></table></figure></li><li><p>按前面文档所示，执行<code>python train.py</code>进行训练，执行<code>python test.py</code>进行推理</p></li></ul><h2 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h2><ul><li><p>labelImg标注界面<br><img src="https://github.com/Samge0/yolo8-watermark-brand/assets/17336101/c8f9ac72-09f0-4bf7-93f5-e0aa0b20e7ef" alt="labelImg"></p></li><li><p>训练后的模型预测结果<br><img src="https://github.com/Samge0/yolo8-watermark-brand/assets/17336101/ccdccdc0-8683-499d-bd2b-27948a0fa4f3" alt="output-result"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> samge </tag>
            
            <tag> yolo </tag>
            
            <tag> watermark </tag>
            
            <tag> models </tag>
            
            <tag> demo </tag>
            
            <tag> train </tag>
            
            <tag> labelImg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ApkCopilot 多渠道打包&amp;签名</title>
      <link href="/2024/06/06/apk-copilot/"/>
      <url>/2024/06/06/apk-copilot/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个简易的ApkCopilot 多渠道打包&amp;签名 + gradio操作界面。<a href="https://github.com/Samge0/apk-copilot">Github&gt;&gt;</a><br><br>360加固的<code>多渠道打包+签名</code>功能收费了，这是<code>多渠道打包+签名</code>的替代方案，只需要<code>上传加固后的apk</code>即可自动签名&amp;打多渠道包。<br><br>本项目使用<code>walle</code>进行多渠道打包，需要在安卓项目中配置<a href="https://github.com/Meituan-Dianping/walle">walle</a>。</p><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><p>（这里只是列出开发已知可行版本，其他版本需要使用这自己探索）</p><ul><li>java：<code>java version &quot;17.0.2</code>，<a href="https://jdk.java.net/archive/">下载地址&gt;&gt;</a></li><li>python：<code>Python 3.10</code>，<a href="https://www.python.org/downloads/">下载地址&gt;&gt;</a></li><li>build-tools：<code>33.0.0</code>，<a href="https://androidsdkmanager.azurewebsites.net/Buildtools">下载地址&gt;&gt;</a></li></ul><h2 id="docker方式运行"><a href="#docker方式运行" class="headerlink" title="docker方式运行"></a>docker方式运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name apk-copilot \</span><br><span class="line">-p 7860:7860 \</span><br><span class="line">-e APK_COPILOT_AUTH=&quot;user1:pw1|user2:pw2&quot; \</span><br><span class="line">-v ~/user_configs:/app/res/user_configs \</span><br><span class="line">--pull=always \</span><br><span class="line">--restart always \</span><br><span class="line">--memory=1.0G \</span><br><span class="line">samge/apk-copilot:latest</span><br></pre></td></tr></table></figure><h2 id="本地源码运行"><a href="#本地源码运行" class="headerlink" title="本地源码运行"></a>本地源码运行</h2><ul><li><p>安装依赖<br>先按<code>版本信息</code>配置本地环境，然后创建python的env环境，安装python依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>复制配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp config.dev.json config.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -R 本地路径xxx/build-tools/31.0.0 res/build-tools/31.0.0</span><br></pre></td></tr></table></figure></li><li><p>运行</p><blockquote><p>gradio界面</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn app:app --reload --host 0.0.0.0 --port 7860</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h2><p><img src="https://github.com/Samge0/apk-copilot/raw/main/res/screenshot/%E4%B8%80%E9%94%AE%E6%89%93%E5%A4%9A%E6%B8%A0%E9%81%93%E5%8C%85&%E7%AD%BE%E5%90%8D.png" alt="一键打多渠道包&amp;签名"><br><img src="https://github.com/Samge0/apk-copilot/raw/main/res/screenshot/%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE.jpg" alt="密钥配置"><br><img src="https://github.com/Samge0/apk-copilot/raw/main/res/screenshot/%E6%B8%A0%E9%81%93%E9%85%8D%E7%BD%AE.png" alt="渠道配置"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ApkCopilot </tag>
            
            <tag> 多渠道打包 </tag>
            
            <tag> apk签名 </tag>
            
            <tag> 360加固 </tag>
            
            <tag> samge </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode Samge Translate 翻译助手 插件</title>
      <link href="/2024/06/06/vscode-samge-translate/"/>
      <url>/2024/06/06/vscode-samge-translate/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> <a href="https://github.com/Samge0/vscode-samge-translate">VSCode Samge Translate</a>是一个基于VSCode的<code>翻译插件</code>，提供了从<code>英文到中文</code>、从<code>中文到英文</code>的翻译功能，以及<code>中文转变量名</code>功能支持多规则变量名（<code>camelCase、capitalCase、constantCase、dotCase、headerCase、noCase、paramCase、pascalCase、pathCase、snakeCase</code>）转换操作。使用百度&#x2F;其他<code>翻译引擎API</code>来实现准确的翻译结果。<br></p><p>当前支持的翻译引擎包括：<code>百度</code>、<code>阿里</code>、<code>腾讯</code>、<code>火山</code>、<code>有道</code>、<code>DeepL</code>。<br></p><p>这个GIF展示本插件的翻译功能交互，翻译结果可在选中文本后面展示、OUTPUT面板展示、右下角提示框展示、鼠标放在文本上悬浮展示，这些展示方式可在配置中开启或关闭。<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/SamgeTranslateDisplay.gif" alt="SamgeTranslateDisplay"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>您可以通过VSCode扩展市场搜索 <code>VSCode Samge Translate</code> 来安装此插件。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li><strong>英文翻译成中文</strong>：可以将选中的英文文本翻译成中文。</li><li><strong>英文翻译成中文-自动替换</strong>：可以将选中的英文文本翻译成中文，并自动替换原选择文本。</li><li><strong>中文翻译成英文</strong>：可以将选中的中文文本翻译成英文。</li><li><strong>中文翻译成英文-自动替换</strong>：可以将选中的中文文本翻译成英文，并自动替换原选择文本。</li><li><strong>中文转变量名-自动替换</strong>：支持将中文自动转换成多种编程命名格式的英文变量名。</li><li><strong>配置灵活</strong>：可通过VSCode设置自定义翻译引擎参数等。</li></ul><h3 id="快捷键信息（可自行修改）"><a href="#快捷键信息（可自行修改）" class="headerlink" title="快捷键信息（可自行修改）"></a>快捷键信息（可自行修改）</h3><table><thead><tr><th>命令名称</th><th>预置快捷键（Windows&#x2F;Linux）</th><th>预置快捷键（macOS）</th></tr></thead><tbody><tr><td>Samge Translate：英译中-en2zh</td><td>alt+x</td><td>alt+x</td></tr><tr><td>Samge Translate：英译中并替换-en2zhReplace</td><td>ctrl+shift+alt+x</td><td>ctrl+shift+alt+x</td></tr><tr><td>Samge Translate：中译英-zh2en</td><td>alt+z</td><td>alt+z</td></tr><tr><td>Samge Translate：中译英并替换-zh2enReplace</td><td>ctrl+shift+alt+z</td><td>ctrl+shift+alt+z</td></tr><tr><td>Samge Translate：中文转变量名-zh2var</td><td>shift+alt+w</td><td>shift+alt+w</td></tr></tbody></table><h3 id="配置项信息"><a href="#配置项信息" class="headerlink" title="配置项信息"></a>配置项信息</h3><table><thead><tr><th>配置项</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>samge.translate.enable</td><td>boolean</td><td>true</td><td>是否启用插件</td></tr><tr><td>samge.translate.enableHover</td><td>boolean</td><td>false</td><td>是否在鼠标悬浮时自动翻译</td></tr><tr><td>samge.translate.enableOutput</td><td>boolean</td><td>true</td><td>是否在OUTPUT窗口展示</td></tr><tr><td>samge.translate.enableRightDisplay</td><td>boolean</td><td>true</td><td>是否在选中文本右侧展示翻译结果</td></tr><tr><td>samge.translate.languageFrom</td><td>string</td><td>en</td><td>翻译源语言</td></tr><tr><td>samge.translate.languageTo</td><td>string</td><td>zh</td><td>翻译目标语言</td></tr><tr><td>samge.translate.providerName</td><td>string</td><td>baidu</td><td>翻译引擎提供者</td></tr><tr><td>samge.translate.providerAppId</td><td>string</td><td></td><td>翻译引擎的AppId</td></tr><tr><td>samge.translate.providerAppSecret</td><td>string</td><td></td><td>翻译引擎的AppSecret</td></tr><tr><td>samge.translate.limitSingleMaximum</td><td>integer</td><td>1000</td><td>单次翻译最大字符限制</td></tr></tbody></table><h2 id="快捷键和配置的编辑方法"><a href="#快捷键和配置的编辑方法" class="headerlink" title="快捷键和配置的编辑方法"></a>快捷键和配置的编辑方法</h2><p>您可以通过以下步骤来编辑快捷键和配置项：</p><ol><li><strong>编辑快捷键</strong>：在VSCode中，通过 <code>File &gt; Preferences &gt; Keyboard Shortcuts</code> (文件 &gt; 首选项 &gt; 键盘快捷方式) 来设置您的快捷键（可搜索关键词<code>samge</code>快速定位相关配置项）。</li><li><strong>编辑配置</strong>：在VSCode中，通过 <code>File &gt; Preferences &gt; Settings &gt; Extensions &gt; Vscode Samge Translate Configuration</code> (文件 &gt; 首选项 &gt; 设置 &gt; 扩展 &gt; Vscode Samge Translate Configuration) 来设置您的配置项（可搜索关键词<code>samge</code>快速定位相关配置项）。</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li><p><a href="">如何获取appId和appSecret</a>？</p><ul><li><a href="https://api.fanyi.baidu.com/api/trans/product/prodinfo">百度</a>：5万免费字符&#x2F;月 (个人认证后可切换高级版：100w免费字符&#x2F;月)</li><li><a href="https://www.aliyun.com/product/ai/base_alimt?source=5176.11533457&userCode=wsnup3vv">阿里</a>：：100万免费字符&#x2F;月</li><li><a href="https://cloud.tencent.com/document/product/551/35017?fromSource=gwzcw.1293314.1293314.1293314&cps_key=963fb04b6aae26f0014088af393dccf1">腾讯</a>：：500万免费字符&#x2F;月</li><li><a href="https://www.volcengine.com/docs/4640/68515">火山</a>：：200万免费字符&#x2F;月</li><li><a href="https://ai.youdao.com/DOCSIRMA/html/trans/price/wbfy/index.html">有道</a>：：新账号有50元固定免费体验额度</li><li><a href="https://www.deepl.com/zh/pro#developer">deepl</a>：：50万免费字符&#x2F;月</li></ul></li><li><p>当前支持的翻译引擎有哪些？</p><ul><li><input checked="" disabled="" type="checkbox"> 百度 (baidu)</li><li><input checked="" disabled="" type="checkbox"> 阿里 (alibaba)</li><li><input checked="" disabled="" type="checkbox"> 腾讯 (tencent)</li><li><input checked="" disabled="" type="checkbox"> 火山 (volcano)</li><li><input checked="" disabled="" type="checkbox"> 有道 (youdao)</li><li><input checked="" disabled="" type="checkbox"> DeepL (deepl)</li></ul></li><li><p>当前支持的翻译语言有哪些？</p><ul><li><input checked="" disabled="" type="checkbox"> en</li><li><input checked="" disabled="" type="checkbox"> zh</li></ul></li></ul><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p><a href="https://github.com/Samge0/vscode-samge-translate/blob/main/CHANGELOG.md">点击这里查看更新记录&gt;&gt;</a></p><hr><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>如果您有任何建议或代码贡献，欢迎通过GitHub仓库提交问题或拉取请求。</p><h2 id="版权和许可"><a href="#版权和许可" class="headerlink" title="版权和许可"></a>版权和许可</h2><p>此VSCode插件遵循MIT许可证发布。</p><h3 id="相关截图"><a href="#相关截图" class="headerlink" title="相关截图"></a>相关截图</h3><p>自动缓存翻译引擎配置参数，方便切换：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/SamgeTranslateConfigAutoCache.gif" alt="SamgeTranslateConfigAutoCache"></p><p>翻译的多种结果展示方式：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/TranslateDisplayStyle.png" alt="TranslateDisplayStyle"></p><p>中文转变量名（中英混合&#x2F;纯英文也可以转不同驼峰规则变量名）：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/TestCustomVariables.png" alt="TestCustomVariables"></p><p>自定义快捷键.gif：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/KeyboardShortcuts.gif" alt="KeyboardShortcuts.gif"></p><p>自定义快捷键：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/KeyboardShortcuts.png" alt="KeyboardShortcuts"></p><p>配置信息.gif：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/ExtensionsVscodeSamgeTranslateConfiguration.gif" alt="ExtensionsVscodeSamgeTranslateConfiguration.gif"></p><p>配置信息：<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/ExtensionsVscodeSamgeTranslateConfiguration.png" alt="ExtensionsVscodeSamgeTranslateConfiguration"></p><p>增加光标左侧连续汉字转英文功能（默认没有开启，需要到插件配置中勾选并启用该功能）:<br><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/KeyboardShortcutsAndZh2varNew.gif" alt="KeyboardShortcutsAndZh2varNew"></p><p><img src="https://github.com/Samge0/vscode-samge-translate/raw/main/screenshot/KeyboardShortcutsAndZh2varNew.png" alt="KeyboardShortcutsAndZh2varNew"></p><h3 id="Dev"><a href="#Dev" class="headerlink" title="Dev"></a>Dev</h3><p><a href="https://github.com/Samge0/vscode-samge-translate/blob/main/README-dev.md">点击这里查看插件开发相关内容&gt;&gt;</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> samge </tag>
            
            <tag> tools </tag>
            
            <tag> vscode </tag>
            
            <tag> vscode插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2中docker环境突然无法ping通宿主机的问题处理</title>
      <link href="/2024/06/06/wsl2-ping-unreachable/"/>
      <url>/2024/06/06/wsl2-ping-unreachable/</url>
      
        <content type="html"><![CDATA[<blockquote><p>【省流提示】：以下内容作用不大，仅属于作者个人的踩坑记录，请忽略。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>windows下的docker用得好好的，但突然有一天docker容器无法访问宿主机中的代理，进入容器发现无法ping通宿主机。（我只是个小呆瓜，我也很懵啊）<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/293ab6c5-d899-4581-97ee-e321e9572395" alt="image"></p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程&gt;&gt;&gt;"></a>处理过程&gt;&gt;&gt;</h2><h3 id="1、检查网络配置"><a href="#1、检查网络配置" class="headerlink" title="1、检查网络配置"></a>1、检查网络配置</h3><p>查看wsl2网络配置跟宿主机网络配置是否一致</p><p>分别在wsl2虚拟机中执行<code>ifconfig</code>跟在windows中执行<code>ipconfig /all</code>，发现wsl2中的ip为<code>172.24.101.x</code>，windows中的WSL桥适配器的ip是<code>172.24.96.x</code>。<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/4d27e4e2-b438-4bba-85e7-94adc2d890db" alt="image"></p><h3 id="2、修改配置"><a href="#2、修改配置" class="headerlink" title="2、修改配置"></a>2、修改配置</h3><p>修改wsl2中的ip（例如这里修改为<code>172.24.96.100</code>）</p><ul><li>【可选】在wsl2终端中直接修改，测试是否可行：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 172.24.96.100 netmask 255.255.240.0</span><br><span class="line">sudo route add default gw 172.24.96.1 eth0</span><br></pre></td></tr></table></figure></li><li>【推荐】修改wsl2虚拟机中的配置文件<code>/etc/netplan/01-netcfg.yaml</code>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | tee /etc/netplan/01-netcfg.yaml</span><br><span class="line">network:</span><br><span class="line">version: 2</span><br><span class="line">ethernets:</span><br><span class="line">    eth0:</span><br><span class="line">    dhcp4: no</span><br><span class="line">    addresses: [172.24.96.100/20]</span><br><span class="line">    gateway4: 172.24.96.1</span><br><span class="line">    nameservers:</span><br><span class="line">        addresses: [8.8.8.8]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>  然后执行 <code>sudo netplan apply</code> 使配置生效</li></ul><h3 id="3、验证结果"><a href="#3、验证结果" class="headerlink" title="3、验证结果"></a>3、验证结果</h3><p>修改wsl2的ip配置后，可以正常ping通宿主机了。<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/c318db43-5f42-4430-a1a9-9f0632540f6c" alt="image"></p><h3 id="4、被啪啪打脸"><a href="#4、被啪啪打脸" class="headerlink" title="4、被啪啪打脸"></a>4、被啪啪打脸</h3><p>以为上面可以ping通就可以了吗？</p><p>NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO!NO^10086</p><p>测试了其他docker容器，发现还是无法ping通，所以上面解决方案是错误的（留下没有技术的泪水(̂ ˃̥̥̥ ˑ̫ ˂̥̥̥ )̂……洪湖水啊……）。</p><p><img src="https://github.com/Samge0/samge-blog/assets/17336101/a797c956-8cdb-4001-96f1-7361a497f025" alt="image"></p><h3 id="5、继续排查继续尝试解决"><a href="#5、继续排查继续尝试解决" class="headerlink" title="5、继续排查继续尝试解决"></a>5、继续排查继续尝试解决</h3><p>心想这问题就是这两天发生的，<code>嫌疑犯</code>必定在其中。我似乎回忆起最近用vscode的<code>Dev Containers</code>插件来运行过开发环境，经排查，确实又找到了一些线索。</p><p>以下是其中一个<code>.devcontainer/docker-compose.yml</code>的配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">storydiffusion:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">..</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">.devcontainer/Dockerfile-dev</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">PROXY:</span> <span class="string">http://192.168.50.48:7890</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">..:/app</span>    </span><br><span class="line">      <span class="bullet">-</span> <span class="string">F:/.cache:/root/.cache</span>    </span><br><span class="line">    <span class="attr">command:</span> <span class="string">sleep</span> <span class="string">infinity</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">NVIDIA_VISIBLE_DEVICES:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">XXXX_DEMO:</span> <span class="string">XXXX_DEMO</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">            <span class="attr">count:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">capabilities:</span> [<span class="string">gpu</span>]</span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">22g</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:7890:7860&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>PROXY</code>配置了端口是<code>7890</code>的代理，而下面的<code>ports</code>本来应该将容器的<code>7860</code>映射到宿主机的<code>7860</code>，但是实际上映射到了<code>0.0.0.0:7890</code>。</p><p>我怀疑过是否跟端口冲突有关，但是正常情况下，启动docker容器时应该会报端口占用才对，这里没有提示，为什么呢？可能是当时代理软件没有打开，而<code>7890</code>端口刚好未被占用吧。</p><p>于是乎，开发环境的docker容器就这么启动了，且中奖式地创建了一条<code>192.168.50.0/20</code>的<code>bridge</code>网络。而我宿主机的地址是<code>192.168.50.48</code>，跟这个docker的<code>bridge</code>网络有冲突。</p><p>我的网络知识实在有限（留下没有技术的泪水……(-̩̩̩-̩̩̩-̩̩̩-̩̩̩-̩̩̩___-̩̩̩-̩̩̩-̩̩̩-̩̩̩-̩̩̩)），实在不明白这一切为什么就这么巧合地发生了。</p><p><img src="https://github.com/Samge0/samge-blog/assets/17336101/a797c956-8cdb-4001-96f1-7361a497f025" alt="image"></p><p>我只知道，当我将那条<code>192.168.50.0/20</code>的<code>bridge</code>网络删除掉 + 修正之前错误的<code>7890</code>端口映射后，一切都恢复了正常。</p><p>我感到欢喜又感到悲伤。欢喜是因为这个问题终于解决了，可以继续<code>c</code>docker了。悲伤的是，我并不知道到底是什么原因，导致docker创建了<code>192.168.50.0/20</code>的<code>bridge</code>网络。 </p><p>或许 Docker 在创建默认 bridge 网络时检测到冲突（例如，如果 <code>172.17.0.0/16</code> 已经被占用），它可能会选择其他可用的子网。而 <code>192.168.50.0/20</code> 碰巧是下一个可用的子网，那么它就选择了这个子网……<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/b886082e-1e2d-409b-83be-6633d3a0f4e9" alt="image"></p><p>我能想到的是，这一切可能都源于中奖式的巧合（再再次留下没有技术的泪水……）(༎ຶ ෴ ༎ຶ) ( ´༎ຶㅂ༎ຶ&#96;) (༎ຶ⌑༎ຶ) ฅ(⌯͒•̩̩̩́ ˑ̫ •̩̩̩̀⌯͒)ฅ</p><p><img src="https://github.com/Samge0/samge-blog/assets/17336101/a797c956-8cdb-4001-96f1-7361a497f025" alt="image"></p><h3 id="6、小结"><a href="#6、小结" class="headerlink" title="6、小结"></a>6、小结</h3><p>其实上面的<code>.devcontainer/docker-compose.yml</code>配置，没有明确配置docker的网络，启动时会创建一个新的docker桥接网络。这里建议还是主动指定容器的网络，尽可能的避免奇怪（这里的奇怪仅对于我这样的小白而言）的问题发生。</p><p>没指定网络的情况：<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/b886082e-1e2d-409b-83be-6633d3a0f4e9" alt="image"></p><p>指定网络的情况：<br><img src="https://github.com/Samge0/samge-blog/assets/17336101/1f55ed21-5801-4aa7-9a5f-46a9288d68f8" alt="image"></p><p>如何配置指定的网络？只需要在<code>.devcontainer/docker-compose.yml</code>中增加<code>network_mode: bridge</code>即可，默认会自动配置到名称为<code>bridge</code>的网络下。</p><p>如果需要配置其他网络，则需要手动创建，并指定网络名称，例如这里创建一个名为<code>vscode_devcontainer</code>的网络：。</p><ul><li><p>创建网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create vscode_devcontainer</span><br></pre></td></tr></table></figure></li><li><p>配置<code>.devcontainer/docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">storydiffusion:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">..</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">.devcontainer/Dockerfile-dev</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">PROXY:</span> <span class="string">http://192.168.50.48:7890</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">..:/app</span>    </span><br><span class="line">      <span class="bullet">-</span> <span class="string">F:/.cache:/root/.cache</span>    </span><br><span class="line">    <span class="attr">command:</span> <span class="string">sleep</span> <span class="string">infinity</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">NVIDIA_VISIBLE_DEVICES:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">XXXX_DEMO:</span> <span class="string">XXXX_DEMO</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">            <span class="attr">count:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">capabilities:</span> [<span class="string">gpu</span>]</span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vscode_devcontainer</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">22g</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;0.0.0.0:7860:7860&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>.devcontainer/devcontainer.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;storydiffusion&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dockerComposeFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker-compose.yml&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;storydiffusion&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workspaceFolder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;ms-python.python&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ms-python.debugpy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;humao.rest-client&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;samge.vscode-samge-translate&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode_devcontainer&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明&gt;&gt;&gt;"></a>其他说明&gt;&gt;&gt;</h2><h3 id="1、参考文章"><a href="#1、参考文章" class="headerlink" title="1、参考文章"></a>1、参考文章</h3><ul><li><a href="https://www.jianshu.com/p/ba2cf239ebe0">WSL2 网络异常排查 [ping 不通、网络地址异常、缺少默认路由、被宿主机防火墙拦截]</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> wls2 </tag>
            
            <tag> docker </tag>
            
            <tag> windows </tag>
            
            <tag> bridge </tag>
            
            <tag> 子网冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/27/hello-world/"/>
      <url>/2024/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Hi-guys"><a href="#Hi-guys" class="headerlink" title="Hi guys"></a>Hi guys</h2><p>my name is samge, nice to meet you.</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
